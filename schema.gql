schema {
  query: QueryRoot
  mutation: MutationRoot
}

type QueryRoot {
  user: Member
  member(email: String!): Member!
  members(include: String): [Member!]!
  event(id: Int!): Event!
  events: [Event!]!
  publicEvents: [PublicEvent!]!
  absenceRequests: [AbsenceRequest!]!
  gigRequest(id: Int!): GigRequest!
  gigRequests: [GigRequest!]!
  variable(key: String!): Variable
  meetingMinutes(id: Int!): MeetingMinutes!
  allMeetingMinutes: [MeetingMinutes!]!
  uniform(id: Int!): Uniform!
  uniforms: [Uniform!]!
  song(id: Int!): Song!
  songs: [Song!]!
  publicSongs: [PublicSong!]!
  songLink(id: Int!): SongLink!
  currentSemester: Semester!
  semester(name: String!): Semester!
  semesters: [Semester!]!
  fees: [Fee!]!
  transactions: [Transaction!]!
  staticData: StaticData!
  officers: [MemberRole!]!
  rolePermissions: [RolePermission!]!
}

type MutationRoot {
  # Logs the member in
  login(form: LoginInfo!): NewToken!
  logout: Boolean!
  forgotPassword(email: String!): Boolean!
  resetPassword(token: String!, form: PasswordReset!): Boolean!
  registerMember(form: NewMember!): Member!
  registerForSemester(form: RegisterForSemesterForm!): Member!
  updateProfile(form: NewMember!): Member!
  updateMember(member: String!, form: NewMember!): Member!
  loginAs(member: String!): NewToken!
  deleteMember(member: String!): String!
  createEvent(form: NewEvent!): Event!
  updateEvent(id: Int!form: NewEvent!): Event!
  deleteEvent(id: Int!): Int!
  updateAttendance(eventId: Int!, member: String!, form: AttendanceForm!): Attendance!
  rsvpForEvent(id: Int!, attending: Boolean!): Attendance!
  confirmForEvent(id: Int!): Attendance!
  updateCarpools(eventId: Int!, carpools: [UpdatedCarpool!]!): Boolean!
  approveAbsenceRequest(eventId: Int!, member: String!): AbsenceRequest!
  denyAbsenceRequest(eventId: Int!, member: String!): AbsenceRequest!
  submitAbsenceRequest(eventId: Int!, reason: String!): AbsenceRequest!
  submitGigRequest(form: NewGigRequest!): GigRequest!
  dismissGigRequest(id: Int!): GigRequest!
  reopenGigRequest(id: Int!): GigRequest!
  createEventFromGigRequest(id: Int!, form: NewEvent!): Event!
  setVariable(key: String!, value: String!): Variable
  unsetVariable(key: String!): Variable
  createDocument(name: String!, url: String!): Document!
  updateDocument(name: String!, url: String!): Document!
  deleteDocument(name: String!): Document!
  createMeetingMinutes(name: String!): MeetingMinutes!
  updateMeetingMinutes(id: Int!, form: UpdatedMeetingMinutes!): MeetingMinutes!
  emailMeetingMinutes(id: Int!): MeetingMinutes!
  deleteMeetingMinutes(id: Int!): MeetingMinutes!
  createUniform(form: NewUniform!): Uniform!
  updateUniform(id: Int!, form: NewUniform!): Uniform!
  deleteUniform(id: Int!): Uniform!
  createSong(form: NewSong!): Song!
  updateSong(id: Int!, form: SongUpdate!): Song!
  deleteSong(id: Int!): Song!
  createSongLink(songId: Int!, form: NewSongLink!): SongLink!
  updateSongLink(id: Int!, form: SongLinkUpdate!): SongLink!
  deleteSongLink(id: Int!): SongLink!
  createSemester(form: NewSemester!): Semester!
  updateSemester(name: String!, form: NewSemester!): Semester!
  setCurrentSemester(name: String!): Semester!
  addPermissionForRole(position: String!, permission: String!, eventType: String): Boolean!
  removePermissionForRole(position: String!, permission: String!, eventType: String): Boolean!
  addOfficership(position: String!, member: String!): MemberRole!
  removeOfficership(position: String!, member: String!): MemberRole!
  updateFeeAmount(name: String!, amount: Int!): Fee!
  chargeDues: [Transaction!]!
  chargeLateDues: [Transaction!]!
  addBatchOfTransactions(batch: TransactionBatch!): [Transaction!]!
  resolveTransaction(id: Int!, resolved: Boolean!): Transaction!
  uploadFrontend(zip: String!): Boolean!
  sendEmail(since: NaiveDateTime!): Boolean!
}

type Member {
  # The member's email, which must be unique
  email: String!
  # The member's first name
  firstName: String!
  # The member's nick name
  preferredName: String
  # The member's last name
  lastName: String!
  # The member's full name
  fullName: String!
  # The member's phone number
  phoneNumber: String!
  # An optional link to a profile picture for the member
  picture: String
  # The number of people the member is able to drive for gigs
  passengers: Int!
  # Where the member lives
  location: String!
  # Whether the member currently lives on campus (assumed false)
  onCampus: Boolean
  # An optional bio for the member
  about: String
  # The member's academic major
  major: String
  # The member's academic minor
  minor: String
  # Where the member originally comes from
  hometown: String
  # What year the member arrived at Tech (e.g. 2012)
  arrivedAtTech: Int
  # What brought the member to Glee Club
  gatewayDrug: String
  # What conflicts during the week the member may have
  conflicts: String
  # What dietary restrictions the member may have
  dietaryRestrictions: String
  # The name of the semester they were active during
  semester: String
  # Whether they were in the class or the club (See Enrollment)
  enrollment: Enrollment
  # Which section the member sang in (See SectionType)
  section: String

  positions: [String!]!
  permissions: [MemberPermission!]!
  grades(semester: String): Grades!
  transactions: [Transaction!]!
}

# The required format for modifying role permissions.
type MemberPermission {
  name: String!
  eventType: String
}

type Grades {
  finalGrade: Float!
  eventsWithChanges: [EventWithGradeChange!]!
  volunteerGigsAttended: Int!
}

type EventWithGradeChange {
  event: Event!
  change: GradeChange!
}

type GradeChange {
  # The reason the grade change was incurred.
  reason: String!
  # How much the grade changed.
  change: Float!
  # What the final grade was up to this event.
  partialScore: Float!
}

type Event {
  # The ID of the event
  id: Int!
  # The name of the event
  name: String!
  # The name of the semester this event belongs to
  semester: String!
  # The type of the event (see EventType)
  type: String!
  # When members are expected to arrive to the event
  callTime: NaiveDateTime!
  # When members are probably going to be released
  releaseTime: NaiveDateTime
  # How many points attendance of this event is worth
  points: Int!
  # General information or details about this event
  comments: String
  # Where this event will be held
  location: String
  # Whether this event counts toward the volunteer gig count for the semester
  gigCount: Boolean!
  # Whether members are assumed to attend (most events)
  defaultAttend: Boolean!
  # If this event is for one singing section (SectionType) only, this denotes which one (e.g. old sectionals)
  section: String

  gig: Gig
  userAttendance: Attendance!
  attendance(member: String!): Attendance!
  allAttendance: [Attendance!]!
  carpools: [Carpool!]!
  setlist: [Song!]!
}

type Gig {
  # The ID of the event this gig belongs to
  event: Int!
  # When members are expected to actually perform
  performanceTime: NaiveDateTime!
  # The uniform for this gig
  uniform: Uniform!
  # The name of the contact for this gig
  contactName: String
  # The email of the contact for this gig
  contactEmail: String
  # The phone of the contact for this gig
  contactPhone: String
  # The price we are charging for this gig
  price: Int
  # Whether this gig is visible on the external website
  public: Boolean!
  # A summary of this event for the external site (if it is public)
  summary: String
  # A description of this event for the external site (if it is public)
  description: String
}

type PublicEvent {
  id: Int!
  name: String!
  time: NaiveDateTime!
  location: String!
  summary: String!
  description: String!
  invite: String!
}

type AbsenceRequest {
  # The member that requested an absence
  member: Member!
  # The event they requested absence from
  event: Event!
  # The time this request was placed
  time: NaiveDateTime!
  # The reason the member petitioned for absence with
  reason: String!
  # The current state of the request (See AbsenceRequestState)
  state: AbsenceRequestState!
}

enum AbsenceRequestState {
  APPROVED
  DENIED
  PENDING
}

type GigRequest {
  # The ID of the gig request
  id: Int!
  # When the gig request was placed
  time: NaiveDateTime!
  # The name of the potential event
  name: String!
  # The organization requesting a performance from the Glee Club
  organization: String!
  # If and when an event is created from a request, this is the event
  event: Event
  # The name of the contact for the potential event
  contactName: String!
  # The email of the contact for the potential event
  contactEmail: String!
  # The phone number of the contact for the potential event
  contactPhone: String!
  # When the event will probably happen
  startTime: NaiveDateTime!
  # Where the event will be happening
  location: String!
  # Any comments about the event
  comments: String
  # The current status of whether the request was accepted
  status: GigRequestStatus!
}

enum GigRequestStatus {
  PENDING
  ACCEPTED
  DISMISSED
}

type Variable {
  # The name of the variable
  key: String!
  # The value of the variable
  value: String!
}

type MeetingMinutes {
  # The id of the meeting minutes
  id: Int!
  # The name of the meeting
  name: String!
  # When these notes were initially created
  date: NaiveDate!
  # The private / redacted, complete officer notes
  private: String
  # The public, edited notes visible by all members
  public: String
}

type Uniform {
  # The ID of the uniform
  id: Int!
  # The name of the uniform
  name: String!
  # The associated color of the uniform (In the format "#HHH", where "H" is a hex digit)
  color: String
  # The explanation of what to wear when wearing the uniform
  description: String
}

type Song {
  # The ID of the song
  id: Int!
  # The title of the song
  title: String!
  # Any information related to the song (minor changes to the music, who wrote it, soloists, etc.)
  info: String
  # Whether it is in this semester's repertoire
  current: Boolean!
  # The key of the song
  key: Pitch
  # The starting pitch for the song
  startingPitch: Pitch
  # The mode of the song (Major or Minor)
  mode: SongMode
  # The links connected to the song sorted into sections
  links: [SongLinkSection!]!
}

enum Pitch {
  AFLAT
  A
  ASHARP
  BFLAT
  B
  BSHARP
  CFLAT
  C
  CSHARP
  DFLAT
  D
  DSHARP
  EFLAT
  E
  ESHARP
  FFLAT
  F
  FSHARP
  GFLAT
  G
  GSHARP
  UNKNOWN
}

enum SongMode {
  MAJOR
  MINOR
}

type SongLinkSection {
  name: String!
  links: [SongLink!]!
}

type PublicSong {
  title: String!
  current: Boolean!
  videos: [PublicVideo!]!
}

type SongLink {
  # The ID of the song link
  id: Int!
  # The ID of the song this link belongs to
  song: Int!
  # The type of this link (e.g. MIDI)
  type: String!
  # The name of this link
  name: String!
  # The target this link points to
  target: String!
}

type Semester {
  # The name of the semester
  name: String!
  # When the semester starts
  startDate: NaiveDateTime!
  # When the semester ends
  endDate: NaiveDateTime!
  # How many volunteer gigs are required for the semester
  gigRequirement: Int!
  # Whether this is the current semester
  current: Boolean!
}

type Fee {
  # The short name of the fee
  name: String!
  # A longer description of what it is charging members for
  description: String!
  # The amount to charge members
  amount: Int!
}

type Transaction {
  # The ID of the transaction
  id: Int!
  # The email of the member this transaction was charged to
  member: Member!
  # When this transaction was charged
  time: NaiveDateTime!
  # How much this transaction was for
  amount: Int!
  # A description of what the member was charged for specifically
  description: String!
  # Optionally, the name of the semester this transaction was made during
  semester: String
  # The name of the type of transaction
  type: String!
  # Whether the member has paid the amount requested in this transaction
  resolved: Boolean!
}

type StaticData {
  mediaTypes: [MediaType!]!
  uniforms: [Uniform!]!
  permissions: [Permission!]!
  roles: [Role!]!
  eventTypes: [EventType!]!
  sections: [String!]!
  transactionTypes: [String!]!
  documents: [Document!]!
}

type MediaType {
  # The name of the type of media
  name: String!
  # The order of where this media type appears in a song's link section
  order: Int!
  # The type of storage that this type of media points to
  storage: StorageType!
}

type Permission {
  # The name of the permission
  name: String!
  # A descriptiion of what the permission entails
  description: String
  # Whether the permission applies to a type of event or generally
  type: PermissionType!
}

enum PermissionType {
  STATIC
  EVENT
}

type Role {
  # The name of the role
  name: String!
  # Used for ordering the positions (e.g. President before Ombudsman)
  rank: Int!
  # The maximum number of the position allowed to be held at once. If it is 0 or less, no maximum is enforced.
  maxQuantity: Int!
}

type EventType {
  # The name of the type of event
  name: String!
  # How many points this type is worth
  weight: Int!
}

type MemberRole {
  # The email of the member holding the role
  member: String!
  # The name of the role being held
  role: String!
}

type RolePermission {
  # The ID of the role permission
  id: Int!
  # The name of the role this junction refers to
  role: String!
  # The name of the permission the role is awarded
  permission: String!
  # The type of event the permission optionally applies to
  eventType: String
}

type LoginInfo {
  email: String!
  passHash: String!
}

type NewToken {
  token: String!
}

type PasswordReset {
  passHash: String!
}

type NewMember {
  email: String!
  firstName: String!
  preferredName: String
  lastName: String!
  passHash: String
  phoneNumber: String!
  picture: String
  passengers: Int!
  location: String!
  onCampus: Boolean
  about: String
  major: String
  minor: String
  hometown: String
  arrivedAtTech: Int
  gatewayDrug: String
  conflicts: String
  dietaryRestrictions: String
  enrollment: Enrollment
  section: String
}

type RegisterForSemesterForm {
  location: String!
  onCampus: Boolean
  conflicts: String!
  dietaryRestrictions: String!
  enrollment: Enrollment!
  section: String!
}

type NewEvent {
  event: NewEventFields!
  gig: NewGig
  repeat: NewEventPeriod
}

type NewEventFields {
  name: String!
  semester: String!
  type: String!
  callTime: NaiveDateTime!
  releaseTime: NaiveDateTime
  points: Int!
  comments: String
  location: String
  gigCount: Boolean
  defaultAttend: Boolean!
}

type NewGig {
  performanceTime: NaiveDateTime!
  uniform: Int!
  contactName: String
  contactEmail: String
  contactPhone: String
  price: Int
  public: Boolean!
  summary: String
  description: String
}

type NewEventPeriod {
  period: Period!
  until: NaiveDate
}

enum Period {
  NO
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
}

type AttendanceForm {
  shouldAttend: Boolean!
  didAttend: Boolean!
  minutesLate: Int!
  confirmed: Boolean!
}

type Attendance {
  # The email of the member this attendance belongs to
  member: Member!
  # Whether the member is expected to attend the event
  shouldAttend: Boolean!
  # Whether the member did attend the event
  didAttend: Boolean!
  # Whether the member confirmed that they would attend
  confirmed: Boolean!
  # How late the member was if they attended
  minutesLate: Int!

  absenceRequest: AbsenceRequest
  rsvpIssue: String
  approvedAbsence: Boolean!
}

type Carpool {
  # The email of the driver of the carpool.
  driver: Member!
  # The emails of the passengers of the carpool.
  passengers: [Member!]!
}

type UpdatedCarpool {
  # The email of the driver of the carpool.
  driver: String!
  # The emails of the passengers of the carpool.
  passengers: [String!]!
}

type NewGigRequest {
  name: String!
  organization: String!
  contactName: String!
  contactEmail: String!
  contactPhone: String!
  startTime: NaiveDateTime!
  location: String!
  comments: String
}

type Document {
  # The name of the Google Doc
  name: String!
  # A link to the Google Doc (must be an embed link)
  url: String!
}

type UpdatedMeetingMinutes {
  name: String!
  private: String
  public: String
}

type NewUniform {
  name: String!
  color: String
  description: String
}

type NewSong {
  title: String!
  info: String
}

type SongUpdate {
  title: String!
  current: Boolean!
  info: String
  key: Pitch
  startingPitch: Pitch
  mode: SongMode
}

type NewSongLink {
  type: String!
  name: String!
  target: String!
  content: String
}

type SongLinkUpdate {
  name: String!
  target: String!
}

type NewSemester {
  name: String!
  startDate: NaiveDateTime!
  endDate: NaiveDateTime!
  gigRequirement: Int!
}

type TransactionBatch {
  members: [String!]!
  type: String!
  amount: Int!
  description: String!
}

enum Enrollment {
  CLASS
  CLUB
}
